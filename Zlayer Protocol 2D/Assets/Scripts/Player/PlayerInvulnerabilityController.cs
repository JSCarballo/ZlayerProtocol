using System.Collections;
using UnityEngine;

/// Controla la invulnerabilidad y el parpadeo del Player sin tocar Health.
/// Otros sistemas (enemigos, trampas, etc.) deben consultar IsInvulnerable antes de dañar,
/// y llamar StartInvulnerability() cuando apliquen daño al Player.
public class PlayerInvulnerabilityController : MonoBehaviour
{
    [Header("Invulnerabilidad")]
    [SerializeField, Tooltip("Duración tras recibir daño")]
    private float invulnSeconds = 1.0f;

    public bool IsInvulnerable { get; private set; }

    [Header("Blink visual")]
    [SerializeField] private SpriteBlinker2D blinker; // se auto-resuelve si está vacío

    Coroutine invCR;

    void Awake()
    {
        if (!blinker) blinker = GetComponentInChildren<SpriteBlinker2D>(true);
        if (!blinker)
            Debug.LogWarning("[PlayerInvulnerabilityController] No se encontró SpriteBlinker2D. El parpadeo no ocurrirá.");
    }

    public void StartInvulnerability() => StartInvulnerability(invulnSeconds);

    public void StartInvulnerability(float secondsOverride)
    {
        if (secondsOverride <= 0f) return;
        if (invCR != null) StopCoroutine(invCR);
        invCR = StartCoroutine(InvulnRoutine(secondsOverride));
    }

    IEnumerator InvulnRoutine(float secs)
    {
        IsInvulnerable = true;

        if (blinker) blinker.Play(secs);

        yield return new WaitForSeconds(secs);

        IsInvulnerable = false;
        invCR = null;
    }

    public void CancelInvulnerability()
    {
        if (invCR != null) StopCoroutine(invCR);
        IsInvulnerable = false;
        invCR = null;
        if (blinker) blinker.StopBlink();
    }
}
